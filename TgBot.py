import sqlite3
import asyncio
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from main import AvitoParse
import logging
from logging.handlers import TimedRotatingFileHandler
import os

bot = AsyncTeleBot('TOKEN')
user_data = {}
tracking_tasks = {}
handler = TimedRotatingFileHandler(
    filename="bot.log",  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
    when="midnight",  # –û—á–∏—Å—Ç–∫–∞ –≤ –ø–æ–ª–Ω–æ—á—å
    interval=1,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö
    backupCount=0  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
)
handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    handlers=[handler]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π
)


async def monitor_tracking(user_id, product_name, check_frequency, object_id):
    avito = AvitoParse(
        product_name_search=product_name,
        version_brow=131
    )

    while object_id in tracking_tasks:
        try:
            avito.parse()
            updated_data = avito.updates_product()
            logging.info(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {updated_data}')
            if updated_data:
                for ad_id, ad_data in updated_data.items():
                    title = ad_data[0]  # –ù–∞–∑–≤–∞–Ω–∏–µ
                    price = ad_data[1]  # –¶–µ–Ω–∞
                    description = ad_data[2]  # –û–ø–∏—Å–∞–Ω–∏–µ
                    link = ad_data[3]  # –°—Å—ã–ª–∫–∞
                    images = ad_data[4]  # –ö–æ—Ä—Ç–µ–∂ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"üîî –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è *{product_name}*:\n\n"
                        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
                        f"üíµ *–¶–µ–Ω–∞:* {price} —Ä—É–±.\n\n"
                        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({link})"
                    )

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
                    media_group = [types.InputMediaPhoto(images[0], caption=message_text, parse_mode='Markdown')]

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    media_group.extend([types.InputMediaPhoto(image_url) for image_url in images[1:]])

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
                    await bot.send_media_group(user_id, media_group)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–µ–∂–∫–µ –∑–∞ '{product_name}': {e}")
        await asyncio.sleep(check_frequency * 60)


async def start_tracking():
    conn = sqlite3.connect('tracking.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('SELECT id, user_id, product_name, check_frequency FROM tracking_product')
    tracking_items = cursor.fetchall()
    cursor.close()
    conn.close()

    for item in tracking_items:
        object_id, user_id, product_name, check_frequency = item

        if object_id not in tracking_tasks:
            task = asyncio.create_task(
                monitor_tracking(user_id, product_name, check_frequency, object_id)
            )
            tracking_tasks[object_id] = task


async def stop_tracking(object_id):
    if object_id in tracking_tasks:
        task = tracking_tasks.pop(object_id)
        task.cancel()


@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    conn = sqlite3.connect('tracking.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute(''' 
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tracking_product (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product_name TEXT,
        check_frequency INTEGER,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    ''')

    user_id = message.chat.id
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    cursor.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–∂–∫—É")
    markup.add("–£–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–∫—É")
    await bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üôà\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–∫—É")
async def delete_tracking(message):
    user_id = message.chat.id
    conn = sqlite3.connect('tracking.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('SELECT id, product_name FROM tracking_product WHERE user_id = ?', (user_id,))
    user_trackings = cursor.fetchall()

    if not user_trackings:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–µ–∂–∫–∏.")
        cursor.close()
        conn.close()
        return

    markup = types.InlineKeyboardMarkup()
    for tracking_id, product_name in user_trackings:
        markup.add(types.InlineKeyboardButton(text=product_name, callback_data=f"delete_{tracking_id}"))
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–∂–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    cursor.close()
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
async def confirm_deletion(call):
    tracking_id = int(call.data.split("_")[1])
    conn = sqlite3.connect('tracking.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('DELETE FROM tracking_product WHERE id = ?', (tracking_id,))
    conn.commit()

    if tracking_id in tracking_tasks:
        await stop_tracking(tracking_id)

    cursor.close()
    conn.close()

    await bot.send_message(call.message.chat.id, "–°–ª–µ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")


@bot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–∂–∫—É")
async def add_tracking(message):
    user_id = message.chat.id
    user_data[user_id] = {}
    await bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏/—É—Å–ª—É–≥–∏):")
    user_data[user_id]['state'] = 'waiting_for_product_name'


@bot.message_handler(func=lambda msg: msg.chat.id in user_data and user_data[msg.chat.id].get('state') == 'waiting_for_product_name')
async def get_product_name(message):
    user_id = message.chat.id
    user_data[user_id]['product_name'] = message.text
    await bot.send_message(user_id, "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    user_data[user_id]['state'] = 'waiting_for_check_frequency'


@bot.message_handler(func=lambda msg: msg.chat.id in user_data and user_data[msg.chat.id].get('state') == 'waiting_for_check_frequency')
async def get_check_frequency(message):
    user_id = message.chat.id
    try:
        check_frequency = int(message.text)
        user_data[user_id]['check_frequency'] = check_frequency

        conn = sqlite3.connect('tracking.db', check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute(''' 
        INSERT INTO tracking_product (user_id, product_name, check_frequency)
        VALUES (?, ?, ?)
        ''', (user_id, user_data[user_id]['product_name'], check_frequency))
        conn.commit()
        cursor.close()
        conn.close()

        await bot.send_message(user_id, f"–°–ª–µ–∂–∫–∞ –∑–∞ '{user_data[user_id]['product_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        user_data.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await start_tracking()
    except ValueError:
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")


async def main():
    if os.path.exists('tracking.db'):
        await start_tracking()
    await bot.polling(none_stop=True)


if __name__ == "__main__":
    asyncio.run(main())
